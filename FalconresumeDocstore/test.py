import requests,sys
# res = requests.get("http://c.docstore.monsterindia.com/767/M22/85511766/100489136/100489136.txt")
# print(res.text)
# data = res.text
# print(sys.getsizeof(data))
import mysql
import mysql.connector
conf_fal = {"user": "vtiwari", "password": "GhR42wMRQ}", "host": "10.216.247.119", "database": "dolphin"}
def dolphin_insert_connection():
    connection = mysql.connector.connect(user=conf_fal['user'],
                                         password=conf_fal['password'],
                                         host=conf_fal['host'],
                                         database=conf_fal['database'])
    cursor = connection.cursor(dictionary=True)
    return connection, cursor
import base64,sys
import zlib
# compressed = 'eJwdktkNgDAMQxfqR+5j/8V4QUJQUttx3Nrzl0+f+uunPPpm+Tf3Z/tKX1DM5bXP+wUFA777bCob4HMRfUk14QwfDYPrrA5gcuQB49lQQxdZpdr+1oN2bEA3pW5Nf8NGOFsR19NBszyX7G2raQpkVUEBdbTLuwSRlcDCYiW7GeBaRYJrgImrM3lmI/WsIxFXNd+aszXoRXuZ1PnZRdwKJeqYYYKq6y1++PXOYdgM0TlZcymCOdKqR7HYmYPiRslDr2Sn6C0Wgw+a6MakM2VnBk6HwU6uWqDRz+p6wtKTCg2WsfdKJwfJlHNaFT4+Q7PGfR9hyWK3p3464nhFwpOd7kdvjmz1jpWcxmbG/FJUXdMZgrpzs+jxC11twrBo3TaNgvsf8oqIYwT4r9XkPnNC1XcP7qD5cW7UHSJZ3my5qba+ozncl5kz8gGEEYOQ'
# data = zlib.decompress(base64.b64decode(compressed))
# data1=zlib.compress(bytes(data.encode("utf8")))#.decode('latin-1')
# vdata  =zlib.compress(bytes(data.encode("utf8"))).decode('latin1')
# print("++++++++",sys.getsizeof(vdata))
# print(zlib.decompress(vdata.encode("latin1")))
# print("122222++++++++",sys.getsizeof(zlib.compress(bytes(data.encode("utf8"))).decode('latin-1')))
# print(str(data1).encode("utf-8"))
# encoding = 'utf-8'
# print(data1)
# # print (type(data1),data1.decode('latin-1') )
# data2=zlib.decompress(data1)
# print (sys.getsizeof(data1),sys.getsizeof(data2),data2)
# f=open("C:\\Users\\vktiwari\\Documents\\crawler.log",'r')
# datfile =f.read()
# f.close()
# print(sys.getsizeof(datfile))
# print(sys.getsizeof(zlib.compress(bytes(datfile.encode("utf-8"))).decode('latin-1')))
# print(data1)
# records=[(data1.decode('latin-1'),1111111,222222,33333,444444,0)]
# records=[(str(data1),1111111,222222,33333,444444,0)]

# vdata  =zlib.compress(bytes(data.encode("utf8"))).decode('latin1')
# records=[(vdata,1111111,222222,33333,444444,0)]
# insert_query = """insert into user_active_resume_text (`resume_text`,`kiwi_profile_id`,`user_id`,`profile_id`,`user_active_data_id`,`status`) values(%s,%s,%s,%s,%s,%s);"""
# conn, curr = falcon_insert_connection()
# curr.executemany(insert_query,records)
# conn.commit()
# conn.close()

# insert_query = """select resume_text from user_active_resume_text where id=113374;"""
# conn, curr = falcon_insert_connection()
# curr.execute(insert_query)
# datacurr = curr.fetchone()
# print(sys.getsizeof(datacurr.get("resume_text")))
# # print(sys.getsizeof(zlib.decompress(datacurr.get("resume_text").encode('latin-1'))))
# # print(datacurr.get("resume_text")[2:-1])
# # print(zlib.decompress(bytes(datacurr.get("resume_text").encode("utf8"))))
# outdata = zlib.decompress(datacurr.get("resume_text").encode("latin1"))
# print(sys.getsizeof(outdata),sys.getsizeof(vdata))
# conn.close()

# df = b'x\x9c\x8dV]W\xdb8\x14|\xae\x7f\xc5}\x846aqZ \xd9\xa75\x89\xbb\xa4\'\x04J\xb2\x9fo7\xb6\x12\xab\x91%W\x92\xa1\xe9\xaf\xdf\x91H\x9a\x94\xed)\xf8\x018\xb64\x9a\x99{\xe7\n\xa2\xdb\xfcnv3\xcd&4\xca\xe7\xd9x2K\x92)\xd7\xe2\x15\x9e\xcc\xba\xaa\x14\xa2\xa1y%u\x99$#\xf6\x82\xcc\x92\x16\xd2\xfa\n\xdf{\x17\xbe\xa2k\xb6EE\xe9`\xd0O\x92\xa1\xd1\x9e\x0bO\\\x96V8\xf7\x8a~\xfe\xf4\xfa\xe9[\x9a\x89\xc2\x1bKo/\xba\x97\x1d\x1aV\xacK\xb9b[\x11\xed\xe1\x9a\xcah\xf1,\xda\x9bAz\xde{;\xe8_\xa4\xfd\xd3\xb3$\xc9\xbb5K\xf5\xea\x99]\xbc\x95\xe8\x83\x80\xdfVa\xcbIa\xea\x04O6\xccF\xf9\xf5xH\x1f\xff\xc8&\xe3\xf7\xe3a6\x1f\xdfL\x93\xe4\x19\x1aD\x1f[Vr)\x0b\xf6\xd2\xe8\xe7\x97\x13\x8d\xb5\xf3\xd2\xb7^\xbcd1\xd1?\x82\xed\x0bVfE%\xc5\xbd\xa8\x85\xf6OV\xcf\x84\x96\xb0\xdc\x89\xc2\xe8\x92\xed\x86D\xd9>\xb2%\xa9\xb7k`B-l!\xc8y+\xb8N~7\xf7\xc2\xea\x00F\xb5)\x85\xc2\xee\' \xae\xa8\x8cQ\xdbzv\xd3\xf3\xc3jv\xa0\xb1\x94\xfc2}\xbd\xd3\xf4<\xb9\x92\xab\xaa;\x920F\x17\x91\xd9Q\x86\xdf\xf7b\xcfp\xc7\xb3[\xb4\xd6\xca\xa2UmM\x1c\xd6H/\x85#%\xd7\x82J\xd6\x90\x00\x16\xe4\x1ac\xbd;\xde3\x18\xc9F\x99\x9a\x03\x1e7\x8d\x92\xa2\xa4E\xeb$\x1a\xcd\xd1~\xd5\x04\x0e*:{s\xb1{u4kD!Q\xe0\xaf\xdf\x0c\xbb2\xae\x91\x1e\xaf\xfc\xe68\x99\xfe;\xce;4\xe757\xad\xe6\x0eem\xb1V\x81\xc0K\xb4C\xf9E\x17?\x10\xa5o\xa9\x9c\xdfe\xe3\xf9\x0cixMcbH\xa4\x8amI\x0f\xc6\xae\xa5^EmK%\xbe\xc8\x85\x12\xd4\x08\xeb\x8c\xee`\xcd\xe7V\x16\xeb\xf8q-\x84&\x85\x96\xd1\xc2\x86\xf0j\xf1@n-\x95\x82\xcc\x00Y1LeZZ)t\xa96\xa4\xd9\xb7\xf6\xd1\xb3\x8255\x8a7\xe4+A\xd6(\xb8\n\x00&\x8f\x86\xa0Z\xd4\x0b \xb2\xa3\x07\xa1T\xf8\x1d_\xe3\xa4RX g\x0b\x19\x1c!o"W\x94\x06u\xc2\x00\xc1\x11\x01\xbb\x01,{\x8f~\n.bQ)<\xc2\xe7\xb0s\xc8\r\x0758ke\x19\xdeBf`\x8dF+\x90T\xf7(Nm\xc2![\xd0GH\x8b\xca\xb8\xd8!\x0cF\x8d5\x9f\xd0\x8b.~c\xe7\xe4*\xb6o8!\xd3\xac6\x1e\tU\xdb\x8d\x06\xe7\xd5\xe4\x8c\xba\x8f\xdc\x0f\x18\xec|\xc6\x00\x14\r\x1c\x02\xc2V\xc1\x83\xc4\xf4cj\x8c\x93\xb11\xa1\x06!.E\xd4\x8e\xcd;\xe1-6\xd9@\xce\xb9\x9d\xb1+c@\tIj\x15\xf6\xb0\x8b\'\x88\xe5R\xc4\x16\x8f\xcan[\xf4}\xbb\'X7>\x08\x8b\x88\x15/d\xd4\xf1;\xa2\xe9cT[\xbd\x9d7\xbb\xda\x86m\x10\xb3\x89\x07\x83t\xd0\xf3}U\\#xM\xa5\xc4\xb16\xc4\x1a]\xbajy\x85"/\x91\xeb\xa2u\xde`\x02\x04\xd7\xef\x11u\x11\x82\x143u\x94\xeb\x95\x92\x0e\x99\xbe\x82)\xb2\x13\xa8~\x02\xa3c\xcc\xcc\x0f7\x97\x94\xff\x8d\xde\x1d\xe7\xd3a\x1e\x9b\xf6/0\x16\xa1\x00\xf0\xaa`\x87\x99d\x83t\\)\xd6\x81\x88\x92\x9f[\x8c\x0bz\xaf\xd8#\x7f\xd5>1\x1d\x9a\x8a\x87\xaf\x82\xc3\xdfOp\xaeY\x83h\xc4\xf9\x00\xd6\x06\x8cM\xe9\xba\xfb\xb0\x1d\x15PdY\x1d\xff\x04diq\xbd\xa0\xed\xdc\xfa\x10\xef\x16\xf5@\x9a\xbb4\xc5\xbc\xa8\\e\xacx\x11\xa5\x85\xe0\x16r\xe0\x96CQ\x19\xc8\x81G\xcdk\xd16\xb8e<&Y\x80\xbf\x16E\x11\xf8\x7f\x915w_\x80\xabi\x9cO\x10\xff\xc20nY\x00\\Z\x0cF\xef<\xd8f\x05\xa2Vo\xba\xbb+4\x1d\xd0\xe8GC\xf7\xf1\x19^ew\xd9p\x9e\xdf\xd1]\xfe>\xbf\x0b\xf5\t\xaf_\xd3\xb5=\xa1?\xd9\xb6\x9afhC\xc5t4\x926"\x1e?\x1dZ\xbb\xa2Mb\xd1\x9e~MO\x7fI\xcfhn\xdb\xd8\xde#\x8bV\xeeP\xce\x10>g\x18!\xf7>\x9e|\xb7sw\xcdo\'\xc0\xaf\xf4\xe6\xfc]/\xed\x9d\x0fz\xfd\xfe\xc5\x96 \xfe%\x91(N\x98\x1ftt\xf3\x80Yv\x9c\x1c\x94\xbeC\xfb\xda\x0f/G\'\xc9\x0f1{g\xbd^\x9a\xf6\xdfE\xd5\xee\x84n\xad\xdc\xb0^3MZ_\xd9C\xe1\xc9\xffm\xee\x1c\xda|\xe0\xf2\x0f\x8e\x1a\xa4\x83\xd3wi/=\xed\xf7N\x1f\xcd\xff\x0f\xab\xa6\xcfW'
# df = b'x\\x9c\\x8dV]W\\xdb8\\x14|\\xae\\x7f\\xc5}\\x846aqZ \\xd9\\xa75\\x89\\xbb\\xa4\\\'\\x04J\\xb2\\x9fo7\\xb6\\x12\\xab\\x91%W\\x92\\xa1\\xe9\\xaf\\xdf\\x91H\\x9a\\x94\\xed)\\xf8\\x018\\xb64\\x9a\\x99{\\xe7\\n\\xa2\\xdb\\xfcnv3\\xcd&4\\xca\\xe7\\xd9x2K\\x92)\\xd7\\xe2\\x15\\x9e\\xcc\\xba\\xaa\\x14\\xa2\\xa1y%u\\x99$#\\xf6\\x82\\xcc\\x92\\x16\\xd2\\xfa\\n\\xdf{\\x17\\xbe\\xa2k\\xb6EE\\xe9`\\xd0O\\x92\\xa1\\xd1\\x9e\\x0bO\\\\\\x96V8\\xf7\\x8a~\\xfe\\xf4\\xfa\\xe9[\\x9a\\x89\\xc2\\x1bKo/\\xba\\x97\\x1d\\x1aV\\xacK\\xb9b[\\x11\\xed\\xe1\\x9a\\xcah\\xf1,\\xda\\x9bAz\\xde{;\\xe8_\\xa4\\xfd\\xd3\\xb3$\\xc9\\xbb5K\\xf5\\xea\\x99]\\xbc\\x95\\xe8\\x83\\x80\\xdfVa\\xcbIa\\xea\\x04O6\\xccF\\xf9\\xf5xH\\x1f\\xff\\xc8&\\xe3\\xf7\\xe3a6\\x1f\\xdfL\\x93\\xe4\\x19\\x1aD\\x1f[Vr)\\x0b\\xf6\\xd2\\xe8\\xe7\\x97\\x13\\x8d\\xb5\\xf3\\xd2\\xb7^\\xbcd1\\xd1?\\x82\\xed\\x0bVfE%\\xc5\\xbd\\xa8\\x85\\xf6OV\\xcf\\x84\\x96\\xb0\\xdc\\x89\\xc2\\xe8\\x92\\xed\\x86D\\xd9>\\xb2%\\xa9\\xb7k`B-l!\\xc8y+\\xb8N~7\\xf7\\xc2\\xea\\x00F\\xb5)\\x85\\xc2\\xee\\\' \\xae\\xa8\\x8cQ\\xdbzv\\xd3\\xf3\\xc3jv\\xa0\\xb1\\x94\\xfc2}\\xbd\\xd3\\xf4<\\xb9\\x92\\xab\\xaa;\\x920F\\x17\\x91\\xd9Q\\x86\\xdf\\xf7b\\xcfp\\xc7\\xb3[\\xb4\\xd6\\xca\\xa2UmM\\x1c\\xd6H/\\x85#%\\xd7\\x82J\\xd6\\x90\\x00\\x16\\xe4\\x1ac\\xbd;\\xde3\\x18\\xc9F\\x99\\x9a\\x03\\x1e7\\x8d\\x92\\xa2\\xa4E\\xeb$\\x1a\\xcd\\xd1~\\xd5\\x04\\x0e*:{s\\xb1{u4kD!Q\\xe0\\xaf\\xdf\\x0c\\xbb2\\xae\\x91\\x1e\\xaf\\xfc\\xe68\\x99\\xfe;\\xce;4\\xe757\\xad\\xe6\\x0eem\\xb1V\\x81\\xc0K\\xb4C\\xf9E\\x17?\\x10\\xa5o\\xa9\\x9c\\xdfe\\xe3\\xf9\\x0cixMcbH\\xa4\\x8amI\\x0f\\xc6\\xae\\xa5^EmK%\\xbe\\xc8\\x85\\x12\\xd4\\x08\\xeb\\x8c\\xee`\\xcd\\xe7V\\x16\\xeb\\xf8q-\\x84&\\x85\\x96\\xd1\\xc2\\x86\\xf0j\\xf1@n-\\x95\\x82\\xcc\\x00Y1LeZZ)t\\xa96\\xa4\\xd9\\xb7\\xf6\\xd1\\xb3\\x8255\\x8a7\\xe4+A\\xd6(\\xb8\\n\\x00&\\x8f\\x86\\xa0Z\\xd4\\x0b \\xb2\\xa3\\x07\\xa1T\\xf8\\x1d_\\xe3\\xa4RX g\\x0b\\x19\\x1c!o"W\\x94\\x06u\\xc2\\x00\\xc1\\x11\\x01\\xbb\\x01,{\\x8f~\\n.bQ)<\\xc2\\xe7\\xb0s\\xc8\\r\\x0758ke\\x19\\xdeBf`\\x8dF+\\x90T\\xf7(Nm\\xc2![\\xd0GH\\x8b\\xca\\xb8\\xd8!\\x0cF\\x8d5\\x9f\\xd0\\x8b.~c\\xe7\\xe4*\\xb6o8!\\xd3\\xac6\\x1e\\tU\\xdb\\x8d\\x06\\xe7\\xd5\\xe4\\x8c\\xba\\x8f\\xdc\\x0f\\x18\\xec|\\xc6\\x00\\x14\\r\\x1c\\x02\\xc2V\\xc1\\x83\\xc4\\xf4cj\\x8c\\x93\\xb11\\xa1\\x06!.E\\xd4\\x8e\\xcd;\\xe1-6\\xd9@\\xce\\xb9\\x9d\\xb1+c@\\tIj\\x15\\xf6\\xb0\\x8b\\\'\\x88\\xe5R\\xc4\\x16\\x8f\\xcan[\\xf4}\\xbb\\\'X7>\\x08\\x8b\\x88\\x15/d\\xd4\\xf1;\\xa2\\xe9cT[\\xbd\\x9d7\\xbb\\xda\\x86m\\x10\\xb3\\x89\\x07\\x83t\\xd0\\xf3}U\\\\#xM\\xa5\\xc4\\xb16\\xc4\\x1a]\\xbajy\\x85"/\\x91\\xeb\\xa2u\\xde`\\x02\\x04\\xd7\\xef\\x11u\\x11\\x82\\x143u\\x94\\xeb\\x95\\x92\\x0e\\x99\\xbe\\x82)\\xb2\\x13\\xa8~\\x02\\xa3c\\xcc\\xcc\\x0f7\\x97\\x94\\xff\\x8d\\xde\\x1d\\xe7\\xd3a\\x1e\\x9b\\xf6/0\\x16\\xa1\\x00\\xf0\\xaa`\\x87\\x99d\\x83t\\\\)\\xd6\\x81\\x88\\x92\\x9f[\\x8c\\x0bz\\xaf\\xd8#\\x7f\\xd5>1\\x1d\\x9a\\x8a\\x87\\xaf\\x82\\xc3\\xdfOp\\xaeY\\x83h\\xc4\\xf9\\x00\\xd6\\x06\\x8cM\\xe9\\xba\\xfb\\xb0\\x1d\\x15PdY\\x1d\\xff\\x04diq\\xbd\\xa0\\xed\\xdc\\xfa\\x10\\xef\\x16\\xf5@\\x9a\\xbb4\\xc5\\xbc\\xa8\\\\e\\xacx\\x11\\xa5\\x85\\xe0\\x16r\\xe0\\x96CQ\\x19\\xc8\\x81G\\xcdk\\xd16\\xb8e<&Y\\x80\\xbf\\x16E\\x11\\xf8\\x7f\\x915w_\\x80\\xabi\\x9cO\\x10\\xff\\xc20nY\\x00\\\\Z\\x0cF\\xef<\\xd8f\\x05\\xa2Vo\\xba\\xbb+4\\x1d\\xd0\\xe8GC\\xf7\\xf1\\x19^ew\\xd9p\\x9e\\xdf\\xd1]\\xfe>\\xbf\\x0b\\xf5\\t\\xaf_\\xd3\\xb5=\\xa1?\\xd9\\xb6\\x9afhC\\xc5t4\\x926"\\x1e?\\x1dZ\\xbb\\xa2Mb\\xd1\\x9e~MO\\x7fI\\xcfhn\\xdb\\xd8\\xde#\\x8bV\\xeeP\\xce\\x10>g\\x18!\\xf7>\\x9e|\\xb7sw\\xcdo\\\'\\xc0\\xaf\\xf4\\xe6\\xfc]/\\xed\\x9d\\x0fz\\xfd\\xfe\\xc5\\x96 \\xfe%\\x91(N\\x98\\x1ftt\\xf3\\x80Yv\\x9c\\x1c\\x94\\xbeC\\xfb\\xda\\x0f/G\\\'\\xc9\\x0f1{g\\xbd^\\x9a\\xf6\\xdfE\\xd5\\xee\\x84n\\xad\\xdc\\xb0^3MZ_\\xd9C\\xe1\\xc9\\xffm\\xee\\x1c\\xda|\\xe0\\xf2\\x0f\\x8e\\x1a\\xa4\\x83\\xd3wi/=\\xed\\xf7N\\x1f\\xcd\\xff\\x0f\\xab\\xa6\\xcfW'
#
#
# print(zlib.decompress(df))
# print(type(df))


# batch_size=10000
# count=100000
# for offset in range(0, count, batch_size):
#     if offset!=0:
#         print(batch_size, offset)


# insert_query = """select resume_text from user_active_resume_text_2 where profile_id=27210332;"""
# conn, curr = falcon_insert_connection()
# curr.execute(insert_query)
# datacurrs = curr.fetchall()
# for datacurr in datacurrs[:]:
#     outdata = zlib.decompress(datacurr.get("resume_text").encode("latin1"))
#     # print(sys.getsizeof(outdata),outdata.decode("utf-8"))\
#     print(outdata.decode('utf-8'))
#     f=open("demo.txt",'w')
#     f.write(str(outdata.decode('utf-8')).strip())
#     f.close()
#     # break
# conn.close()
# insert_query = """insert into user_active_resume_text_temp_{0} (`resume_text`,`kiwi_profile_id`,`user_id`,`profile_id`,`user_active_data_id`,`status`) values(%s,%s,%s,%s,%s,%s);""".format(1)
# print(insert_query)
# mindate=1000
# maxdate = 20000
# arg_val=0
# query_count = "select count(*) as count from user_active_data as uad inner join user_profiles as up on uad.profile_id=up.id where (mod(uad.profile_id,10) = {0}) and up.resume_exists=1 and uad.created_at between {1} and {2};".format(
#                 str(arg_val),mindate,maxdate)
# print(query_count)
url_link = "http://a.docstore.monsterindia.com/630/M17/84851629/99702735/99702735."
# if url_link.endswith("."):
#     print('yes')
#
# 9990864839
#
# import mysql
# import mysql.connector
# import base64,sys
# import zlib
# # conf_fal = {"user": "username", "password": "password", "host": "10.216.247.119", "database": "dolphin"}
# conf_fal = {"user": "vtiwari", "password": "GhR42wMRQ}", "host": "10.216.247.119", "database": "dolphin"}
# def dolphin_fetch_connection():
#     connection = mysql.connector.connect(user=conf_fal['user'],
#                                          password=conf_fal['password'],
#                                          host=conf_fal['host'],
#                                          database=conf_fal['database'])
#     cursor = connection.cursor(dictionary=True)
#     return connection, cursor
#
# fetch_query = """select * from user_active_resume_text_1 where profile_id=7148741;"""
# conn, curr = dolphin_fetch_connection()
# curr.execute(fetch_query)
# dolphin_records = curr.fetchall()
# for data in dolphin_records:
#     outdata = zlib.decompress(data.get("resume_text").encode("latin1")).decode('utf-8')
#     print(outdata)
#     # f=open("demo.txt",'w')
#     # f.write(str(outdata.decode('utf-8')).strip())
#     # f.close()

import requests
from mimetypes import MimeTypes
mime = MimeTypes()

res = requests.get("http://c.docstore.monsterindia.com/485/M91/40610484/36190100/36190100.doc")
print(res.headers)
mimtype = mime.guess_type("36190100.",strict=True)
print(mimtype)

